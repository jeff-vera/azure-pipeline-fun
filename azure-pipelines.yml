# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pool:
  vmImage: 'VS2017-Win2016'

trigger:
- master
- develop
- feature/*

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  restoreBuildProjects: 'src/**/*.csproj'
  unitTestProjects: 'tests/**/*Tests.Unit/*.csproj'
  integrationTestProjects: 'tests/**/*Tests.Integration/*.csproj'
  azureSubscription: 'Azure-Pipeline-Fun-rg - Azure Service Endpoint'


steps:

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(restoreBuildProjects)'

- powershell: |
    Write-Host "my new env variable is $ENV:aNewVariable"

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(restoreBuildProjects)'

    arguments: '--configuration $(buildConfiguration)'

- task: MSBuild@1
  displayName: build unit test database
  inputs: 
    solution: tests/TestDb/TestDb.sqlproj
    createLogFile: true 
    configuration: Release 

- task: AzureKeyVault@1
  inputs:
    azureSubscription: $(azureSubscription)
    keyVaultName: jeffvera-dev-keyvault    
    secretsFilter: pipeline-fun-unittest-user-name,pipeline-fun-unittest-user-password

- task: SqlAzureDacpacDeployment@1
  displayName: 'Deploy unit test database'
  inputs:
    azureSubscription: $(azureSubscription)
    ServerName: 'jeff-vera-discovery.database.windows.net'
    DatabaseName: TestDb
    SqlUsername: $(pipeline-fun-unittest-user-name)
    SqlPassword: $(pipeline-fun-unittest-user-password)
    DacpacFile: '.\tests\TestDb\bin\$(buildConfiguration)\TestDb.dacpac'

- script: >
    dotnet test --logger trx .\tests\GarbageTests
    /p:CollectCoverage=true 
    /p:CoverletOutputFormat=cobertura 
    /p:Threshold=100 
    /p:ThresholdType=line 
  displayName: 'Garbage tests'

- script: >
    dotnet test --logger trx .\tests\WasteTests
    /p:CollectCoverage=true 
    /p:CoverletOutputFormat=cobertura 
    /p:Threshold=100 
    /p:ThresholdType=line 
  displayName: 'Waste tests'

- powershell: |
    Write-Host "##vso[task.setvariable variable=myVariable]some value" 
    $ENV:aNewVariable="haha!"
    Write-Host "even more text!"
    Write-Host "my new env variable is $ENV:aNewVariable"

- script: |
    setx OH_BOY "yeah"    
    dotnet test --logger trx .\tests\RefuseTests /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Threshold=100 /p:ThresholdType=line 
    echo %OH_BOY%
  displayName: 'Refuse tests'

- task: PublishTestResults@2
  displayName: Publish test results 
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- script: |
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.0.0-rc4
    mkdir $(Build.SourcesDirectory)\results
    .\reportgenerator "-reports:.\tests\*\coverage.cobertura.xml" "-targetdir:results" "-reporttypes:Cobertura" 
    .\reportgenerator "-reports:.\tests\*\coverage.*.xml" "-targetdir:results" "-reporttypes:HTMLInline;HTMLChart"
  displayName: "Generate coverage results"

- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage results 
  inputs:
    summaryFileLocation: $(Build.SourcesDirectory)\results\Cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)\results
    codecoverageTool: cobertura
    failIfCoverageEmpty: true 

- task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
  displayName: Check build quality 
  inputs:
    checkCoverage: true 
    coverageFailOption: fixed 
    coverageType: lines 
    coverageThreshold: 70 

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'




