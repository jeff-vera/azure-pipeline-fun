# -ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
#

# pool:
#   vmImage: 'VS2017-Win2016'

trigger:
- master
- dev
- feature/*

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  restoreBuildProjects: 'src/**/*.csproj'
  unitTestProjects: 'tests/**/*Tests.Unit/*.csproj'
  integrationTestProjects: 'tests/**/*Tests.Integration/*.csproj'
  azureSubscription: 'AzureRmConnection'
  sqlServerName: 'jeff-vera-discovery.database.windows.net'
  shortSqlServerName: 'jeff-vera-discovery'

jobs:

  - job: build
    pool: 
      vmImage: 'VS2017-Win2016'

    steps:

    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '$(restoreBuildProjects)'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '$(restoreBuildProjects)'
        arguments: '--configuration $(buildConfiguration)'

    - task: MSBuild@1
      displayName: build unit test database
      inputs: 
        solution: tests/TestDb/TestDb.sqlproj
        createLogFile: true 
        configuration: Release 

    - task: AzureKeyVault@1
      inputs:
        azureSubscription: $(azureSubscription)
        keyVaultName: jeffvera-dev-keyvault    
        secretsFilter: pipeline-fun-unittest-user-name,pipeline-fun-unittest-user-password

    - task: SqlAzureDacpacDeployment@1
      displayName: 'Deploy unit test database'
      inputs:
        azureSubscription: $(azureSubscription)
        ServerName: $(sqlServerName)
        DatabaseName: TestDb
        SqlUsername: $(pipeline-fun-unittest-user-name)
        SqlPassword: $(pipeline-fun-unittest-user-password)
        DacpacFile: '.\tests\TestDb\bin\$(buildConfiguration)\TestDb.dacpac'


  - job: migrations
    pool: 
        vmImage: 'VS2017-Win2016'

    steps:
      
    - task: Powershell@2
      condition: and( 
                  succeeded(),  
                  or( 
                    eq(variables['Build.SourceBranchName'],'master'), 
                    eq(variables['Build.SourceBranchName'], 'dev') 
                    ) 
                  ) 
      displayName: run migrations 
      inputs:
        targetType: inline
        script: .\src\StubForDatabase\mayflower.exe --folder=".\src\StubForDatabase\migrations" --connection="server=tcp:jeff-vera-discovery.database.windows.net,1433;Initial Catalog=IntegrationTestDb;Persist Security Info=False;User ID=$(pipeline-fun-unittest-user-name);Password=$(pipeline-fun-unittest-user-password);"


  - job: tests
    pool:
      vmImage: 'VS2017-Win2016'

    steps:  

    - script: >
        dotnet test --logger trx .\tests\GarbageTests
        /p:CollectCoverage=true 
        /p:CoverletOutputFormat=cobertura 
      displayName: 'Garbage tests'

    - script: >
        dotnet test --logger trx .\tests\WasteTests
        /p:CollectCoverage=true 
        /p:CoverletOutputFormat=cobertura 
      displayName: 'Waste tests'

    - script: |
        set unitTestDbUser=$(pipeline-fun-unittest-user-name)
        set unitTestDbPassword=$(pipeline-fun-unittest-user-password)
        dotnet test --logger trx .\tests\RefuseTests /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura  
      displayName: 'Refuse tests'

    - task: PublishTestResults@2
      displayName: Publish test results 
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'

    - script: |
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.0.0-rc4
        mkdir $(Build.SourcesDirectory)\results
        .\reportgenerator "-reports:.\tests\*\coverage.cobertura.xml" "-targetdir:results" "-reporttypes:Cobertura" 
        .\reportgenerator "-reports:.\tests\*\coverage.*.xml" "-targetdir:results" "-reporttypes:HTMLInline;HTMLChart"
      displayName: "Generate coverage results"

    - task: PublishCodeCoverageResults@1
      displayName: Publish code coverage results 
      inputs:
        summaryFileLocation: $(Build.SourcesDirectory)\results\Cobertura.xml
        reportDirectory: $(Build.SourcesDirectory)\results
        codecoverageTool: cobertura
        failIfCoverageEmpty: true 

    - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@5
      displayName: Check build quality 
      inputs:
        checkCoverage: true 
        coverageFailOption: fixed 
        coverageType: lines 
        coverageThreshold: 10

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'




